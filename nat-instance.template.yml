Description: >
    Deploys a VPC, with a pair of public and private subnets spread across two
    Availabilty Zones. It deploys an 2 Nat instances, with a default route on the public subnets. Based
    on https://github.com/awslabs/ecs-refarch-cloudformation/blob/master/infrastructure/vpc.yaml


Parameters:
    pEnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Default: dev
        Type: String
        AllowedValues: ["dev", "uat", "prod"]

    pNatInstanceType:
        Description: Which instance type should we use to run as NAT internet getway?
        Type: String
        Default: t2.nano
        AllowedValues: ["t2.nano", "t2.micro", "t2.small"]

    pEC2InstanceType:
        Description: Which instance type should we use to run as NAT internet getway?
        Type: String
        Default: t2.micro
        AllowedValues: ["t2.nano", "t2.micro", "t2.small"]

    pSshKey:
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
        Type: AWS::EC2::KeyPair::KeyName

Mappings:
    # You can find the latest NAT optimized images using below script
    # ./find-ami.sh amzn-ami-vpc-nat*
    mAWSRegionToAMI:
        us-east-2:
            AMI: ami-fc3b1199 # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        us-east-1:
            AMI: ami-8d7655f7 # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        us-west-2:
            AMI: ami-35d6664d # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        us-west-1:
            AMI: ami-394e4c59 # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        eu-west-3:
            AMI: ami-0fe35572 # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        eu-west-2:
            AMI: ami-87312ae3 # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        eu-west-1:
            AMI: ami-a136a9d8 # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        eu-central-1:
            AMI: ami-5756ca38 # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        ap-northeast-2:
            AMI: ami-c52f8fab # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        ap-northeast-1:
            AMI: ami-2c593d4a # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        ap-southeast-2:
            AMI: ami-3d28d45f # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        ap-southeast-1:
            AMI: ami-270f735b # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        ca-central-1:
            AMI: ami-2b4acf4f # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        ap-south-1:
            AMI: ami-c2e9bead # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs
        sa-east-1:
            AMI: ami-be1f52d2 # amzn-ami-vpc-nat-hvm-2017.09.1.20180115-x86_64-ebs

    # ./find-ami.sh amzn-ami-hvm-*-x86_64-gp2
    mEC2AWSAMI:
        us-east-2:
            AMI: ami-f63b1193 # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        us-east-1:
            AMI: ami-97785bed # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        us-west-2:
            AMI: ami-f2d3638a # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        us-west-1:
            AMI: ami-824c4ee2 # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        eu-west-3:
            AMI: ami-8ee056f3 # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        eu-west-2:
            AMI: ami-403e2524 # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        eu-west-1:
            AMI: ami-d834aba1 # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        eu-central-1:
            AMI: ami-5652ce39 # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        ap-northeast-2:
            AMI: ami-863090e8 # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        ap-northeast-1:
            AMI: ami-ceafcba8 # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        ap-southeast-2:
            AMI: ami-942dd1f6 # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        ap-southeast-1:
            AMI: ami-68097514 # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        ca-central-1:
            AMI: ami-a954d1cd # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        ap-south-1:
            AMI: ami-531a4c3c # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2
        sa-east-1:
            AMI: ami-84175ae8 # amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2


Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.0.0.0/24
            Tags:
                - Key: Name
                  Value: !Sub VPC ${pEnvironmentName}

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub ${pEnvironmentName} Internet Gateway

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    # useful for cidr calculations https://www.ipaddressguide.com/cidr
    SubnetPublic1:
        Type: AWS::EC2::Subnet
        Properties:
            CidrBlock: 10.0.0.0/26
            MapPublicIpOnLaunch: true
            AvailabilityZone: !Select [ 0, !GetAZs ]
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${pEnvironmentName} Public Subnet (AZ1)

    SubnetPublic2:
        Type: AWS::EC2::Subnet
        Properties:
            CidrBlock: 10.0.0.64/26
            MapPublicIpOnLaunch: true
            AvailabilityZone: !Select [ 1, !GetAZs ]
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${pEnvironmentName} Public Subnet (AZ2)

    SubnetPrivate1:
        Type: AWS::EC2::Subnet
        Properties:
            CidrBlock: 10.0.0.128/26
            MapPublicIpOnLaunch: false
            AvailabilityZone: !Select [ 0, !GetAZs ]
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${pEnvironmentName} Private Subnet (AZ1)

    SubnetPrivate2:
            Type: AWS::EC2::Subnet
            Properties:
                MapPublicIpOnLaunch: false
                CidrBlock: 10.0.0.192/26
                AvailabilityZone: !Select [ 1, !GetAZs ]
                VpcId: !Ref VPC
                Tags:
                    - Key: Name
                      Value: !Sub ${pEnvironmentName} Private Subnet (AZ2)

    NatInstanceSercurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Access to the nat instnace
            SecurityGroupIngress:
                # http & https trafic
                - CidrIp: 10.0.0.128/25
                  FromPort: 80
                  ToPort: 80
                  IpProtocol: tcp
                - CidrIp: 10.0.0.128/25
                  FromPort: 443
                  ToPort: 443
                  IpProtocol: tcp
                #ssh access
                - CidrIp: 0.0.0.0/0
                  FromPort: 22
                  ToPort: 22
                  IpProtocol: tcp
                # routing
                - CidrIp: 10.0.0.128/25
                  IpProtocol: icmp
                  FromPort: -1
                  ToPort: -1
            Tags:
                - Key: Name
                  Value: !Sub ${pEnvironmentName}-Nat-SecurityGrouop

    EC2SecurityGroup:
         Type: AWS::EC2::SecurityGroup
         Properties:
             VpcId: !Ref VPC
             GroupDescription: Access ssh access to
             SecurityGroupIngress:
                 - CidrIp : 10.0.0.0/24
                   IpProtocol: tcp
                   FromPort: 22
                   ToPort: 22
             Tags:
                 - Key: Name
                   Value: !Sub ${pEnvironmentName}-EC2_SG

    NatInstance1:
        Type: AWS::EC2::Instance
        Properties:
            InstanceType: !Ref pNatInstanceType
            ImageId: !FindInMap [mAWSRegionToAMI, !Ref "AWS::Region", AMI]
            SourceDestCheck: false
            Tags:
              - Key: Name
                Value: !Sub ${pEnvironmentName} NAT1 instance
            KeyName: !Ref pSshKey
            NetworkInterfaces:
              - SubnetId: !Ref SubnetPublic1
                GroupSet:
                  - !Ref NatInstanceSercurityGroup
                AssociatePublicIpAddress: true
                DeviceIndex: 0

    NatInstance2:
        Type: AWS::EC2::Instance
        Properties:
            InstanceType: !Ref pNatInstanceType
            ImageId: !FindInMap [mAWSRegionToAMI, !Ref "AWS::Region", AMI]
            SourceDestCheck: false
            Tags:
              - Key: Name
                Value: !Sub ${pEnvironmentName} NAT2 instance
            KeyName: !Ref pSshKey
            NetworkInterfaces:
              - SubnetId: !Ref SubnetPublic2
                GroupSet:
                  - !Ref NatInstanceSercurityGroup
                AssociatePublicIpAddress: true
                DeviceIndex: 0


    PrivateEC2Instance1:
        Type: AWS::EC2::Instance
        Properties:
            InstanceType: !Ref pEC2InstanceType
            ImageId: !FindInMap [mEC2AWSAMI, !Ref "AWS::Region", AMI]
            SourceDestCheck: false
            Tags:
              - Key: Name
                Value: !Sub ${pEnvironmentName} EC2 1 instance
            KeyName: !Ref pSshKey
            SecurityGroupIds:
                - !Ref EC2SecurityGroup
            SubnetId: !Ref SubnetPrivate1
            BlockDeviceMappings:
                - DeviceName: /dev/xvda
                  Ebs:
                      VolumeType: gp2
                      VolumeSize: 8

    PrivateEC2Instance2:
        Type: AWS::EC2::Instance
        Properties:
            InstanceType: !Ref pEC2InstanceType
            ImageId: !FindInMap [mEC2AWSAMI, !Ref "AWS::Region", AMI]
            SourceDestCheck: false
            Tags:
              - Key: Name
                Value: !Sub ${pEnvironmentName} EC2 2 instance
            KeyName: !Ref pSshKey
            SecurityGroupIds:
                - !Ref EC2SecurityGroup
            SubnetId: !Ref SubnetPrivate2
            BlockDeviceMappings:
                - DeviceName: /dev/xvda
                  Ebs:
                      VolumeType: gp2
                      DeleteOnTermination: True
                      VolumeSize: 8

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${pEnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref SubnetPublic1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref SubnetPublic2

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${pEnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            InstanceId: !Ref NatInstance1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref SubnetPrivate1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${pEnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            InstanceId: !Ref NatInstance2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref SubnetPrivate2


Outputs:
    VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC

    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref SubnetPublic1, !Ref SubnetPublic2 ]]

    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref SubnetPrivate1, !Ref SubnetPrivate2 ]]

    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref SubnetPublic1

    PublicSubnet2:
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref SubnetPublic2

    PrivateSubnet1:
        Description: A reference to the private subnet in the 1st Availability Zone
        Value: !Ref SubnetPrivate1

    PrivateSubnet2:
        Description: A reference to the private subnet in the 2nd Availability Zone
        Value: !Ref SubnetPrivate1
